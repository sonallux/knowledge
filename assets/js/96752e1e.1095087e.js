"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[5568],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=p(t),m=o,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return t?r.createElement(f,i(i({ref:n},s),{},{components:t})):r.createElement(f,i({ref:n},s))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var p=2;p<a;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5884:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>p});var r=t(7462),o=(t(7294),t(3905));const a={tags:["frontend","angular"]},i="Angular",c={unversionedId:"frontend/angular",id:"frontend/angular",title:"Angular",description:"Injection Functions",source:"@site/docs/frontend/angular.md",sourceDirName:"frontend",slug:"/frontend/angular",permalink:"/knowledge/docs/frontend/angular",draft:!1,editUrl:"https://github.com/sonallux/knowledge/tree/main/docs/frontend/angular.md",tags:[{label:"frontend",permalink:"/knowledge/docs/tags/frontend"},{label:"angular",permalink:"/knowledge/docs/tags/angular"}],version:"current",frontMatter:{tags:["frontend","angular"]},sidebar:"defaultSidebar",previous:{title:"Frontend",permalink:"/knowledge/docs/category/frontend"},next:{title:"Cypress",permalink:"/knowledge/docs/frontend/cypress"}},l={},p=[{value:"Injection Functions",id:"injection-functions",level:2},{value:"Benefits of this new approach",id:"benefits-of-this-new-approach",level:3},{value:"Type safety",id:"type-safety",level:4},{value:"Boilerplate reduction by composing injection functions",id:"boilerplate-reduction-by-composing-injection-functions",level:4},{value:"Dynamic Forms",id:"dynamic-forms",level:2}],s={toc:p};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"angular"},"Angular"),(0,o.kt)("h2",{id:"injection-functions"},"Injection Functions"),(0,o.kt)("p",null,"Using the ",(0,o.kt)("inlineCode",{parentName:"p"},"inject()")," Function seams to be the new way of doing DI in Angular. This functions takes an ",(0,o.kt)("inlineCode",{parentName:"p"},"InjectionToken")," as parameter an returns the value for it from the currently active injector. For more details see ",(0,o.kt)("a",{parentName:"p",href:"https://marmicode.io/blog/angular-inject-and-injection-functions"},"this nice blog post")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"@Component(...)\nexport class ComponentOld {\n    constructor(private httpClient: HttpClient) {}\n}\n\n@Component(...)\nexport class ComponentNew {\n  private httpClient = inject(HttpClient)\n}\n")),(0,o.kt)("h3",{id:"benefits-of-this-new-approach"},"Benefits of this new approach"),(0,o.kt)("h4",{id:"type-safety"},"Type safety"),(0,o.kt)("p",null,"Constructor injection with the ",(0,o.kt)("inlineCode",{parentName:"p"},"@Inject()")," decorator does not have type safety. But when using the ",(0,o.kt)("inlineCode",{parentName:"p"},"inject()")," the type can be correctly inferred:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const MyToken = new InjectionToken<number>('MyToken');\n\n@Component(...)\nclass ComponentOld {\n  constructor(@Inject(MyToken) private value: string) // Compiler can not catch this type mismatch\n}\n\n@Component(...)\nclass ComponentNew {\n  private value = inject(MyToken) // type number is correctly inferred\n}\n")),(0,o.kt)("h4",{id:"boilerplate-reduction-by-composing-injection-functions"},"Boilerplate reduction by composing injection functions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"@Component(...)\nclass RecipesComponent {\n  recipes$ = injectSelection(selectRecipes);\n}\n\nfunction injectSelection(selector) {\n  return inject(Store).select(selector);\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"@Component(...)\nclass ComponentOld {\n  protected entity$: Observable<Entity>;\n\n  constructor(route: ActivatedRoute, http: HttpClient) {\n    this.entity$ = route.params.pipe(\n      map(params => params['id']),\n      filter(id => !!id),\n      switchMap(id => http.get<Entity>(`api/entity/{id}`))\n    )\n  }\n}\n\n@Component(...)\nclass ComponentNew {\n  protected entity$ = fetchEntity();\n}\n\nconst fetchEntity = () => {\n  const http = inject(HttpClient)\n  const route = inject(ActivatedRoute)\n\n  return route.params.pipe(\n    map(params => params['id']),\n    filter(id => !!id),\n    switchMap(id => http.get<Entity>(`api/entity/{id}`))\n  )\n}\n")),(0,o.kt)("h2",{id:"dynamic-forms"},"Dynamic Forms"),(0,o.kt)("p",null,"Next to ",(0,o.kt)("a",{parentName:"p",href:"https://angular.io/guide/forms"},"template-driven Forms")," and ",(0,o.kt)("a",{parentName:"p",href:"https://angular.io/guide/reactive-forms"},"reactive Forms")," Angular has a guide about a third type of forms:  ",(0,o.kt)("a",{parentName:"p",href:"https://angular.io/guide/dynamic-form"},"Dynamic Forms")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Library from ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/udos86"},"Udo Sch\xf6fer"),": ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/udos86/ng-dynamic-forms"},"https://github.com/udos86/ng-dynamic-forms"))))}u.isMDXComponent=!0}}]);